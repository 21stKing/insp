
package inventory_system;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import static inventory_system.MailBoxWindow.email;

/**
 *
 * @author Tebogo kekana 
 */
public class MailBoxWindow extends javax.swing.JFrame 
{
    public static String email;
    public static String message;
    public static String subject;
    public static String recipient;
    public static String on_copy;
    Date logtime;
    public static String [] ccListFaci;
    public static String [] ccListStore;
    
    public MailBoxWindow(String emailIn)
    {   
        email = emailIn;
        logtime = new Date(); 

        initComponents();
        recipient_input.setText(email);
        
        try
        {

            ConnectDatabase database = new ConnectDatabase();	
            //ccListStore = database.getCCListStoreman();
            ccListFaci = database.getCCListFacilitator(); 
            
            //Storeman list
            String [] ccListStoreArray;
            ccListStoreArray = new String [ccListStore.length];

            for(int i=0;i < ccListStore.length;i++)
            {         
                    on_copy_list.insertItemAt("", 0); //append blank space
                    ccListStoreArray[i] = ccListStore[i];
                    on_copy_list.addItem(ccListStoreArray[i]); 
            }
            
            //facilitator list
            String [] ccListFaciArray;
            ccListFaciArray = new String [ccListFaci.length];
            int appendLast = on_copy_list.getItemCount(); //get number of items in the combobox
            
            for(int i=0;i < ccListFaci.length;i++)
            {
                    ccListFaciArray[i] = ccListFaci[i];
                    on_copy_list.insertItemAt(ccListFaciArray[i], appendLast + i); //append new items at the end of the list of combobox  
            }
            
        }
        catch(Exception e1)
        {
            JOptionPane.showMessageDialog(null,e1,"CC Error | E-mail",JOptionPane.ERROR_MESSAGE);	
        }
         
        this.getContentPane().setBackground(Color.white);
    }

    private MailBoxWindow() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        message_body = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        subject_input = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        recipient_input = new javax.swing.JTextField();
        send_mail_btn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        on_copy_list = new javax.swing.JComboBox();
        icon_error = new javax.swing.JLabel();
        error_message_display = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new ImageIcon(getClass().getResource("/inventory_system/image/insp_icon_demo_45x45.png")).getImage());

        message_body.setColumns(20);
        message_body.setForeground(new java.awt.Color(51, 102, 255));
        message_body.setRows(5);
        message_body.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Type in message:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(153, 153, 153))); // NOI18N
        message_body.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                message_bodyKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(message_body);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel1.setText("Subject:");

        subject_input.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        subject_input.setForeground(new java.awt.Color(51, 102, 255));
        subject_input.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 2, true));
        subject_input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                subject_inputKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("To:");

        recipient_input.setEditable(false);
        recipient_input.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        recipient_input.setForeground(new java.awt.Color(51, 102, 255));
        recipient_input.setToolTipText("recipients e-mail address");
        recipient_input.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 2, true));

        send_mail_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/sendMail.png"))); // NOI18N
        send_mail_btn.setText("Send");
        send_mail_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_mail_btnActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Cc:");

        on_copy_list.setForeground(new java.awt.Color(51, 102, 255));

        icon_error.setBackground(new java.awt.Color(255, 255, 255));

        error_message_display.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        error_message_display.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(send_mail_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subject_input)
                            .addComponent(recipient_input, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .addComponent(on_copy_list, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(icon_error, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(error_message_display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(subject_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recipient_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(on_copy_list, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error_message_display, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(icon_error, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send_mail_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public int saveChanges()
    {   
        int value = 0;
        
        return value;
    }
    
    private void send_mail_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_mail_btnActionPerformed
        // Send e-mail to recipient
        message = message_body.getText();
        subject = subject_input.getText();
        recipient = recipient_input.getText();
        on_copy = (String) on_copy_list.getSelectedItem();
        
      if (message.equals(null) || message.equals(""))
      {
        message_body.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255,0,0),2));  
        icon_error.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/cancel.png"))); 
        error_message_display.setText("Warning: You cannot send a blank e-mail!"); 
      }
      else if(subject_input == null )
      {
        subject_input.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255,0,0),2));  
        icon_error.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/cancel.png"))); 
        error_message_display.setText("Warning: Please type in a subject!"); 
      }
      else if(subject_input.equals(""))
      {
        subject_input.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255,0,0),2));  
        icon_error.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/cancel.png"))); 
        error_message_display.setText("Warning: Please type in a subject!");
      }
      else 
      {
          message_body.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0),1));  
          subject_input.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0),1));  
          icon_error.setIcon(new javax.swing.ImageIcon(getClass().getResource(""))); 
          error_message_display.setText(""); 
          
           new GuiWorker().execute();
          
          //Start progress image
          //progress_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/progress.gif"))); 
          
         //send e-mail
         // SendEmail mail = new SendEmail(recipient,email,on_copy,message,subject);
         // String state = mail.Send();
          
        /**  if(state.equals("success")) 
          {
            progress_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/success.png")));   
          }
          else
          {
            progress_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/action_fail.png")));  
          }*/
      }
      
    }//GEN-LAST:event_send_mail_btnActionPerformed

    private void subject_inputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subject_inputKeyTyped
        subject_input.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0),1)); 
    }//GEN-LAST:event_subject_inputKeyTyped

    private void message_bodyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_message_bodyKeyTyped
        message_body.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0),1)); 
        icon_error.setIcon(new javax.swing.ImageIcon(getClass().getResource(""))); 
        error_message_display.setText(""); 
    }//GEN-LAST:event_message_bodyKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //PendingItems main = new PendingItems(id,role);
        //main.setVisible(true);
        this.dispose();
        //this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MailBoxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MailBoxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MailBoxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MailBoxWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MailBoxWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel error_message_display;
    private javax.swing.JLabel icon_error;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea message_body;
    private javax.swing.JComboBox on_copy_list;
    private javax.swing.JTextField recipient_input;
    private javax.swing.JButton send_mail_btn;
    private javax.swing.JTextField subject_input;
    // End of variables declaration//GEN-END:variables
}



class GuiWorker extends SwingWorker<String, String> {

  /*
  * This should just create a frame that will hold a progress bar until the
  * work is done. Once done, it should remove the progress bar from the dialog
  * and add a label saying the task complete.
  */

  private JFrame frame = new JFrame(); 
  private JDialog dialog = new JDialog(frame, "Sending mail", true);
  private JProgressBar progressBar = new JProgressBar();


  public GuiWorker() {
    dialog.setPreferredSize(new Dimension(200,100));
    frame.setResizable(false); 
    frame.setLocationRelativeTo(null);  
    progressBar.setString("Please wait...");
    progressBar.setStringPainted(true);
    progressBar.setIndeterminate(true);
    dialog.getContentPane().add(progressBar);
    dialog.pack();
    dialog.setModal( false );
    dialog.setVisible(true);
  }

  @Override
    protected String doInBackground() throws Exception {
    //System.out.println( "GuiWorker.doInBackground" );
    //send e-mail
    SendEmail mail = new SendEmail(MailBoxWindow.recipient,MailBoxWindow.email,MailBoxWindow.on_copy,MailBoxWindow.message,MailBoxWindow.subject);
    String state = mail.Send();
    
    return state;
  }

    protected void done() {
    //System.out.println("done");
    JButton ok = new JButton("E-mail Sent");
    ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/success.png")));
    JButton notOk = new JButton("Failed");
    notOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory_system/image/action_fail.png"))); 
    String result = "";
      try {
          result = get();  // get the results returned by doInBackground() function and use them
      } catch (InterruptedException ex) {
          Logger.getLogger(GuiWorker.class.getName()).log(Level.SEVERE, null, ex);
      } catch (ExecutionException ex) {
          Logger.getLogger(GuiWorker.class.getName()).log(Level.SEVERE, null, ex);
      }
    
    if(!"success".equals(result))
    {   
    dialog.getContentPane().remove(progressBar);
    dialog.getContentPane().add(notOk);
    ok.addActionListener(new ActionListener() 
        {
          @Override
          public void actionPerformed(ActionEvent e) 
          {
            dialog.dispose();
          }
        });
    dialog.getContentPane().validate();
    }
    else 
    {
       dialog.getContentPane().remove(progressBar);
      dialog.getContentPane().add(ok);
      ok.addActionListener(new ActionListener() 
        {
          @Override
          public void actionPerformed(ActionEvent e) 
          {
            dialog.dispose();
          }
        });
    dialog.getContentPane().validate(); 
    }
  }

}
